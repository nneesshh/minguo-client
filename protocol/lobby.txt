// lobby
#define MSGID_RELOGIN_NOTIFY_NEW		0x888	//其他用户登录通知 2184
#define MSGID_PLAYER_STATUS_NOTIFY_NEW	0x889	//玩家状态改变通知 2185
#define MSGID_SIT_DOWN_NOTIFY_NEW		0x88A	//坐下通知 2186
#define MSGID_PLAYER_BALANCE_NOTIFY		0x88B	//用户账户余额通知 2187

#define MSGID_GAME_ANNOUNCEMENT_NOTIFY	0x911	//公告通知 2321
#define MSGID_GAME_MAIL_NOTIFY			0x912	//邮件通知 2322

#define MSGID_GAME_NEWS_REQ				0x921	//游戏News请求 2337
#define MSGID_GAME_NEWS_RESP			0x922	//游戏News回应 2338

// lobby
#define MSGID_HEART_BEAT_REQ		0x1001		//心跳 4097
#define MSGID_HEART_BEAT_RESP		0x1002		//心跳 4098
#define MSGID_LOGIN_REQ				0x1003		//登录请求 4099
#define MSGID_LOGIN_RESP			0x1004		//登录回应 4100
#define MSGID_REGISTER_REQ			0x1005		//注册请求 4101
#define MSGID_REGISTER_RESP			0x1006		//注册回应 4102

#define MSGID_ENTER_ROOM_REQ		0x1007		//进入房间请求 4103
#define MSGID_ENTER_ROOM_RESP		0x1008		//进入房间回应 4104
#define MSGID_LEAVE_ROOM_REQ		0x1009		//离开房间请求 4105
#define MSGID_LEAVE_ROOM_RESP		0x100A		//离开房间回应 4106
#define MSGID_CHANGE_TABLE_REQ		0x100B		//换桌请求 4107
#define MSGID_CHANGE_TABLE_RESP		0x100C		//换桌回应 4108

#define MSGID_CHANGE_USER_INFO_REQ	0x1101		//修改用户信息请求 4353
#define MSGID_CHANGE_USER_INFO_RESP	0x1102		//修改用户信息回应 4354

#define MSGID_DEPOSIT_CASH_REQ		0x1103		//存款请求 4355
#define MSGID_DEPOSIT_CASH_RESP		0x1104		//存款回应 4356

/// USER_INFO
#define WRITE_USER_INFO(stream, userInfo)				\
	do {												\
		stream.writeInt32(userInfo->userTicketId);		\
		stream.writeString(userInfo->userName);			\
		stream.writeString(userInfo->nickName);			\
		stream.writeString(userInfo->avatar);			\
		stream.writeByte(userInfo->gender);				\
		stream.writeInt64(userInfo->balance);			\
		stream.writeInt64(userInfo->safeBalance);		\
	} while(0)

// ROOM_INFO *
#define	WRITE_ROOM_INFO(stream, roomInfo)			\
	do {											\
		stream.writeInt32(roomInfo->roomId);		\
		stream.writeInt32(roomInfo->lowerLimit);	\
		stream.writeInt32(roomInfo->upperLimit);	\
		stream.writeInt32(roomInfo->baseCoin);		\
		stream.writeInt32(roomInfo->allInBetMax);	\
		stream.writeInt32(roomInfo->userCount);		\
	} while(0)

//TABLE_INFO *
#define	WRITE_TABLE_INFO(stream, tableId, tableInfo)	\
	do {											\
		stream.writeInt32(tableId);					\
		stream.writeByte(tableInfo->status);		\
		stream.writeByte(tableInfo->round);			\
		stream.writeInt32(tableInfo->baseBet);		\
		stream.writeInt64(tableInfo->jackpotSum);	\
		stream.writeInt64(tableInfo->jackpotArea[0]);	\
		stream.writeInt64(tableInfo->jackpotArea[1]);	\
		stream.writeInt64(tableInfo->jackpotArea[2]);	\
		stream.writeInt64(tableInfo->jackpotArea[3]);	\
		stream.writeInt16(tableInfo->bankerSeat);	\
		stream.writeInt16(tableInfo->currentSeat);	\
		stream.writeInt32(tableInfo->gamingCount);	\
		for (int i = 0; i < tableInfo->gamingCount; ++i) {	\
			stream.writeInt16(tableInfo->gamingSeats[i]);	\
		}													\
	} while(0)

// PLAYER_SEAT_INFO *
#define WRITE_PLAYER_SEAT_INFO(stream, seatInfo)				\
	do {														\
		USER_INFO_T *userInfo = seatInfo->user->getUserInfo();	\
		stream.writeInt32(userInfo->userTicketId);				\
		stream.writeString(userInfo->nickName);					\
		stream.writeString(userInfo->avatar);					\
		stream.writeByte(userInfo->gender);						\
		stream.writeInt64(userInfo->balance);					\
		stream.writeByte(seatInfo->status);						\
		stream.writeInt16(seatInfo->user->getGameInfo()->seat);	\
		stream.writeInt32(seatInfo->betSum);					\
		stream.writeInt32(seatInfo->betArea[0]);				\
		stream.writeInt32(seatInfo->betArea[1]);				\
		stream.writeInt32(seatInfo->betArea[2]);				\
		stream.writeInt32(seatInfo->betArea[3]);				\
		stream.writeInt32(seatInfo->bankerBidMultiple);			\
		stream.writeInt32(seatInfo->compareBidMultiple);		\
		stream.writeByte(seatInfo->showCards);					\
		stream.writeByte(seatInfo->display);					\
		unsigned char *cards = seatInfo->cardDeck[0].cards;		\
		int cardsNum = seatInfo->cardDeck[0].cardsNum;			\
		if (seatInfo->display) stream.writeString((const char *)cards, cardsNum);	\
		else stream.writeByte(cardsNum);						\
	} while(0)
